<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="signin" xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>Signing in with Service Provider Accounts</title>

	<section xml:id="signin_introduction">
		<title>Introduction</title>
		<para>
			In order to ease sign in for their users, many applications allow sign in with a service provider such as Twitter or Facebook.
			With this authentication technique, the user signs into (or may already be signed into) his or her provider account.
			The application then tries to match that provider account to a local user account.
			If a match is found, the user is automatically signed into the application.
		</para>
		<para>
			Spring Social supports such service provider-based authentication with <classname>ProviderSignInController</classname> from the <code>spring-social-web</code> module.
			<classname>ProviderSignInController</classname> works very much like <classname>ConnectController</classname> in that it goes through the OAuth flow (either OAuth 1 or OAuth 2, depending on the provider).
			Instead of creating a connection at the end of process, however, <classname>ProviderSignInController</classname> attempts to find a previously established connection and uses the connected account to authenticate the user with the application.
			If no previous connection matches, the flow will be sent to the application's sign up page so that the user may register with the application.
		</para>
	</section>

	<section xml:id="signin_using">
		<title>Enabling provider sign in</title>
		<para>
			To add provider sign in capability to your Spring application, configure <classname>ProviderSignInController</classname> as a bean in your Spring MVC application:
		</para>
		<programlisting language="java"><![CDATA[
@Bean
public ProviderSignInController providerSignInController() {
    return new ProviderSignInController(connectionFactoryLocator(), 
        usersConnectionRepository(), new SimpleSignInAdapter());
}]]>
		</programlisting>
		<para>
			Or in XML, if you prefer:
		</para>		
		<programlisting language="xml"><![CDATA[
<bean class="org.springframework.social.connect.signin.web.ProviderSignInController">
    <!-- relies on by-type autowiring for the constructor-args -->    
</bean>]]>
		</programlisting>
		<para>
		    As with <classname>ConnectController</classname>, <classname>ProviderSignInController</classname> uses information from the request to determine the protocol, host name, and port number to use when creating a callback URL.
			But you may set the <code>applicationUrl</code> property to the base external URL of your application to overcome any problems where the request refers to an internal server.
			For example:
		</para>
		<programlisting language="java"><![CDATA[
@Bean
public ProviderSignInController providerSignInController() {
    ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator(), 
        usersConnectionRepository(), new SimpleSignInAdapter());
    controller.setApplicationUrl(environment.getProperty("application.url"));
    return controller;
}]]>
		</programlisting>
		<para>
			Or when configured in XML:
		</para>
		<programlisting language="xml"><![CDATA[
<bean class="org.springframework.social.connect.signin.web.ProviderSignInController">
    <!-- relies on by-type autowiring for the constructor-args -->    
    <property name="applicationUrl" value="${application.url}" />
</bean>]]>
		</programlisting>
		<para>
			Once again, we recommend that you externalize the value of the application URL since it will vary between deployment environments.
		</para>
		<para>
			When authenticating via an OAuth 2 provider, <classname>ProviderSignInController</classname> supports the following flow:
		</para>
		<itemizedlist>
			<listitem><para><code>POST /signin/{providerId}</code> - Initiates the sign in flow by redirecting to the provider's authentication endpoint.</para></listitem>
			<listitem><para><code>GET /signin/{providerId}?code={verifier}</code> - Receives the authentication callback from the provider, accepting a code. Exchanges this code for an access token. Using this access token, it retrieves the user's provider user ID and uses that to lookup a connected account and then authenticates to the application through the sign in service. </para>
				<itemizedlist>
					<listitem>
						<para>
							If the provider user ID doesn't match any existing connection, <classname>ProviderSignInController</classname> will redirect to a sign up URL. 
							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property.
						</para>
					</listitem>
					<listitem>
						<para>
							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password.
							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user.
							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property.
						</para>
					</listitem>
				</itemizedlist>
			</listitem>
		</itemizedlist>
		<para>
			For OAuth 1 providers, the flow is only slightly different:
		</para>
		<itemizedlist>
			<listitem><para><code>POST /signin/{providerId}</code> - Initiates the sign in flow. This involves fetching a request token from the provider and then redirecting to Provider's authentication endpoint.</para></listitem>
			<listitem><para><code>GET /signin/{providerId}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authentication callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token. Using this access token, it retrieves the user's provider user ID and uses that to lookup a connected account and then authenticates to the application through the sign in service. </para>
				<itemizedlist>
					<listitem>
						<para>
							If the provider user ID doesn't match any existing connection, <classname>ProviderSignInController</classname> will redirect to a sign up URL. 
							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property.
						</para>
					</listitem>
					<listitem>
						<para>
							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password.
							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user.
							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property.
						</para>
					</listitem>
				</itemizedlist>
			</listitem>
		</itemizedlist>
		<section>
			<title>ProviderSignInController's dependencies</title>
			<para>
				As shown in the Java-based configuration above, <classname>ProviderSignInController</classname> depends on a handful of other objects to do its job.
			</para>
			<itemizedlist>
				<listitem><para>A <interfacename>ConnectionFactoryLocator</interfacename> to lookup the ConnectionFactory used to create the Connection to the provider.</para></listitem>
				<listitem><para>A <interfacename>UsersConnectionRepository</interfacename> to find the user that has the connection to the provider user attempting to sign in.</para></listitem>
				<listitem><para>A <interfacename>SignInAdapter</interfacename> to sign a user into the application when a matching connection is found.</para></listitem>
			</itemizedlist>
			<para>
				When using XML configuration, it isn't necessary to explicitly configure these constructor arguments because <classname>ProviderSignInController</classname>'s constructor is annotated with <code>@Inject</code>.
				Those dependencies will be given to <classname>ProviderSignInController</classname> via autowiring.
				You'll still need to make sure they're available as beans in the Spring application context so that they can be autowired.
			</para>
			<para>
				You should have already configured most of these dependencies when setting up connection support (in the previous chapter).
				But when used with <classname>ProviderSignInController</classname>, you should configure them to be created as scoped proxies:
			</para>
			<programlisting language="java"><![CDATA[
@Bean
@Scope(value="singleton", proxyMode=ScopedProxyMode.INTERFACES)
public ConnectionFactoryLocator connectionFactoryLocator() {
    ConnectionFactoryRegistry registry = new ConnectionFactoryRegistry();
    
    registry.addConnectionFactory(new FacebookConnectionFactory(
        environment.getProperty("facebook.clientId"),
        environment.getProperty("facebook.clientSecret")));
            
    registry.addConnectionFactory(new TwitterConnectionFactory(
        environment.getProperty("twitter.consumerKey"),
        environment.getProperty("twitter.consumerSecret")));
            
    return registry;
}

@Bean
@Scope(value="singleton", proxyMode=ScopedProxyMode.INTERFACES)
public UsersConnectionRepository usersConnectionRepository() {
    return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator(), textEncryptor);
}]]>
			</programlisting>	
			<para>
				In the event that the sign in attempt fails, the sign in attempt will be stored in the session to be used to present a sign-up page to the user (see <xref linkend="signin_signup"/>).
				By configuring ConnectionFactoryLocator and UsersConnectionRepository as scoped proxies, it enables the proxies to be carried along with the sign in attempt in the session rather than the actual objects themselves.
			</para>
			<para>	
				The <interfacename>SignInAdapter</interfacename> is exclusively used for provider sign in and so a <interfacename>SignInAdapter</interfacename> bean will need to be added to the configuration.
				But first, you'll need to write an implementation of the <interfacename>SignInAdapter</interfacename> interface.
			</para>
			<para>
				The <interfacename>SignInAdapter</interfacename> interface is defined as follows:
			</para>
			<programlisting language="java"><![CDATA[
public interface SignInAdapter {
    void signIn(String userId, Connection<?> connection, NativeWebRequest request);
}]]>
			</programlisting>
			<para>
				The <methodname>signIn()</methodname> method takes the local application user's user ID normalized as a <classname>String</classname>.
				No other credentials are necessary here because by the time this method is called the user will have signed into the provider and their connection with that provider has been used to prove the user's identity.
				Implementations of this interface should use this user ID to authenticate the user to the application. 
			</para>
			<para>
				Different applications will implement security differently, so each application must implement <interfacename>SignInAdapter</interfacename> in a way that fits its unique security scheme.
				For example, suppose that an application's security is based on Spring Security and simply uses a user's account ID as their principal. 
				In that case, a simple implementation of <interfacename>SignInAdapter</interfacename> might look like this:
			</para>
			<programlisting language="java"><![CDATA[
@Service
public class SpringSecuritySignInAdapter implements SignInAdapter {
    public void signIn(String localUserId, Connection<?> connection, NativeWebRequest request) {
        SecurityContextHolder.getContext().setAuthentication(
            new UsernamePasswordAuthenticationToken(localUserId, null, null));
    }
}]]>
			</programlisting>
		</section>
		
		<section>
			<title>Adding a provider sign in button</title>
			<para>
				With <classname>ProviderSignInController</classname> and a <interfacename>SignInAdapter</interfacename> configured, the backend support for provider sign in is in place.
	      		The last thing to do is to add a sign in button to your application that will kick off the authentication flow with <classname>ProviderSignInController</classname>.
	   		</para>
	   		<para>
	      		For example, the following HTML snippet adds a "Signin with Twitter" button to a page:
	  		</para>
			<programlisting language="xml"><![CDATA[
<form id="tw_signin" action="<c:url value="/signin/twitter"/>" method="POST">
  <button type="submit">
    <img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" />
  </button>
</form>]]>
			</programlisting>
			<para>
				Notice that the path used in the form's <code>action</code> attribute maps to the first step in <classname>ProviderSignInController</classname>'s flow.
				In this case, the provider is identified as "twitter".
			</para>
			<note>
				<para>
					Some providers offer client-side sign in widgets, such as Twitter @Anywhere's "Connect with Twitter" button and Facebook's <code>&lt;fb:login-button&gt;</code>.
					Although these widgets offer a sign in experience similar to that of <code>ProviderSignInController</code>, they cannot be used to drive <code>ProviderSignInController</code>'s sign in flow.
					The <code>ProviderSignInController</code> sign in flow should be initiated by submitting a POST request as described above.
				</para>
			</note>
			<para>
				Clicking this button will trigger a POST request to "/signin/twitter", kicking off the Twitter sign in flow. 
				If the user has not yet signed into Twitter, the user will be presented with the following page from Twitter:
			</para>
			<mediaobject>
				<imageobject role="fo">
					<imagedata fileref="images/sign-in-with-twitter.png" format="PNG" align="center" scale="40"/>
				</imageobject>
				<imageobject role="html">
					  <imagedata fileref="images/sign-in-with-twitter.png" format="PNG" align="center" scale="40"/>
				</imageobject>
			</mediaobject>
			<para>
				After signing in, the flow will redirect back to the application to complete the sign in process.
			</para>
    	</section>
	</section>

	<section xml:id="signin_signup">
		<title>Signing up after a failed sign in</title>
		<para>
			If <classname>ProviderSignInController</classname> can't find a local user associated with a provider user attempting to sign in, there may be an opportunity to have the user sign up with the application.
			Leveraging the information about the user received from the provider, the user may be presented with a pre-filled sign up form to explicitly sign up with the application.
			It's also possible to use the user's provider data to implicitly create a new local application user without presenting a sign up form. 
		</para>
		<section xml:id="signin_signup_explicit">
			<title>Signing up with a sign up form</title>					
			<para>
				By default, the sign up URL is "/signup", relative to the application root. 
				You can override that default by setting the <code>signUpUrl</code> property on the controller. 
				For example, the following configuration of <classname>ProviderSignInController</classname> sets the sign up URL to "/register": 
			</para>
			
			<programlisting language="java"><![CDATA[
@Bean
public ProviderSignInController providerSignInController() {
    ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator(), 
        usersConnectionRepository(), new SimpleSignInAdapter());
    controller.setSignUpUrl("/register");
    return controller;
}]]>
			</programlisting>
			<para>
				Or to set the sign up URL using XML configuration:
			</para>
			<programlisting language="xml"><![CDATA[
<bean class="org.springframework.social.connect.signin.web.ProviderSignInController">
    <property name="signUpUrl" value="/register" />
</bean>]]>
			</programlisting>
			<para>
				Before redirecting to the sign up page, <classname>ProviderSignInController</classname> collects some information about the authentication attempt.
				This information can be used to prepopulate the sign up form and then, after successful sign up, to establish a connection between the new account and the provider account.			
			</para>
			<para>
				To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from <methodname>ProviderSignInUtils.getConnection()</methodname>.
				For example, consider this Spring MVC controller method that setups up the sign up form with a <classname>SignupForm</classname> to bind to the sign up form:
			</para>
			<programlisting language="java"><![CDATA[
@RequestMapping(value="/signup", method=RequestMethod.GET)
public SignupForm signupForm(WebRequest request) {
    Connection<?> connection = ProviderSignInUtils.getConnection(request);
    if (connection != null) {
        return SignupForm.fromProviderUser(connection.fetchUserProfile());
    } else {
        return new SignupForm();
    }
}]]>
			</programlisting>
			<para>
				If <methodname>ProviderSignInUtils.getConnection()</methodname> returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application.
				In that case, a <classname>SignupForm</classname> object is created from the user profile data obtained from the connection's <methodname>fetchUserProfile()</methodname> method.
				Within <methodname>fromProviderUser()</methodname>, the <classname>SignupForm</classname> properties may be set like this:
			</para>
			<programlisting language="java"><![CDATA[
public static SignupForm fromProviderUser(UserProfile providerUser) {
    SignupForm form = new SignupForm();
    form.setFirstName(providerUser.getFirstName());
    form.setLastName(providerUser.getLastName());
    form.setUsername(providerUser.getUsername());
    form.setEmail(providerUser.getEmail());
    return form;
}]]>
			</programlisting>
			<para>
				Here, the <classname>SignupForm</classname> is created with the user's first name, last name, username, and email from the <classname>UserProfile</classname>.
				In addition, <classname>UserProfile</classname> also has a <methodname>getName()</methodname> method which will return the user's full name as given by the provider.
			</para>
			<para>
				The availability of <classname>UserProfile</classname>'s properties will depend on the provider.
				Twitter, for example, does not provide a user's email address, so the <methodname>getEmail()</methodname> method will always return null after a sign in attempt with Twitter.
			</para>
			<para>
				After the user has successfully signed up in your application a connection can be created between the new local user account and their provider account. 
				To complete the connection call <methodname>ProviderSignInUtils.handlePostSignUp()</methodname>.
				For example, the following method handles the sign up form submission, creates an account and then calls <methodname>ProviderSignInUtils.handlePostSignUp()</methodname> to complete the connection:
			</para>
			<programlisting language="java"><![CDATA[
@RequestMapping(value="/signup", method=RequestMethod.POST)
public String signup(@Valid SignupForm form, BindingResult formBinding, WebRequest request) {
    if (formBinding.hasErrors()) {
        return null;
    }
    Account account = createAccount(form, formBinding);
    if (account != null) {
        SignInUtils.signin(account.getUsername());
        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);
        return "redirect:/";
    }
    return null;
}]]>
			</programlisting>
		</section>
		<section xml:id="signin_signup_implicit">
			<title>Implicit sign up</title>	
			<para>
				To enable implicit sign up, you must create an implementation of the <interfacename>ConnectionSignUp</interfacename> interface and inject an instance of that <interfacename>ConnectionSignUp</interfacename> to the connection repository.
				The <interfacename>ConnectionSignUp</interfacename> interface is simple, with only a single method to implement:
			</para>				
			<programlisting language="java"><![CDATA[
public interface ConnectionSignUp {
    String execute(Connection<?> connection);
}]]>
			</programlisting>
			<para>
				The <methodname>execute()</methodname> method is given a <interfacename>Connection</interfacename> that it can use to retrieve information about the user.
				It can then use that information to create a new local application user and return the new local user ID.
				For example, the following implementation fetches the user's provider profile and uses it to create a new account: 
			</para>
			<programlisting language="java"><![CDATA[
public class AccountConnectionSignUp implements ConnectionSignUp {

    private final AccountRepository accountRepository;

    public AccountConnectionSignUp(AccountRepository accountRepository) {
        this.accountRepository = accountRepository;
    }

    public String execute(Connection<?> connection) {
        UserProfile profile = connection.fetchUserProfile();
        Account account = createAccount(profile);
        return account != null ? account.getUsername() : null;
    }

    private Account createAccount(UserProfile profile) {
        if (profile == null || profile.getUsername() == null) {
            return null;
        }
        Account account = new Account(profile.getUsername(), profile.getFirstName(), profile.getLastName());
        accountRepository.createAccount(account);
        return account;
    }
	
}]]>
			</programlisting>			
			<para>
				If <methodname>execute()</methodname> returns null, then it indicates that the user could not be implicitly signed up.
				In that case, <classname>ProviderSignInController</classname>'s explicit sign up flow will be in effect and the browser will be redirected to the sign up form.
			</para>
			<para>
				Once you've written a <interfacename>ConnectionSignUp</interfacename> for your application, you'll need to inject it into the <interfacename>UsersConnectionRepository</interfacename>.
				In Java-based configuration: 
			</para>
			<programlisting language="java"><![CDATA[
@Bean
@Scope(value="singleton", proxyMode=ScopedProxyMode.INTERFACES) 
public UsersConnectionRepository usersConnectionRepository(AccountRepository accountRepository) {
    JdbcUsersConnectionRepository repository = new JdbcUsersConnectionRepository(
        dataSource, connectionFactoryLocator(), Encryptors.noOpText());
    repository.setConnectionSignUp(new AccountConnectionSignUp(accountRepository));
    return repository;
}]]>
			</programlisting>	
		</section>
	</section>	
</chapter>